General {
	CompilerFlags	= -Wall -Wextra -Wsign-conversion -Wsuggest-attribute=noreturn	\
						-pipe -mfpmath=both -march=nocona -masm=intel
	LinkerFlags		= -Wall -Wextra -static -nostdlib	\
						-Wl,-e__MCF_ExeStartup,--disable-runtime-pseudo-reloc,--disable-auto-import	\
						-Wl,--wrap=atexit,--wrap=malloc,--wrap=realloc,--wrap=calloc,--wrap=free,--wrap=__cxa_throw	\
						-lstdc++ -lmingwex -lmingw32 -lgcc -lgcc_eh -lmsvcrt -luser32 -lkernel32

	CFlags			= $CompilerFlags -std=c11
	CXXFlags		= $CompilerFlags -std=c++14 -Wnoexcept
	RCFlags			= -c 65001

	CC				= gcc
	CXX				= g++
	WINDRES			= windres
}

Debug = General {
	CompilerConfig	= -fno-builtin -g -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -O0
	LinkerConfig	= -O0
	RCConfig		=
}
Release = General {
	CompilerConfig	= -DNDEBUG -O3 -ffunction-sections -fdata-sections
	LinkerConfig	= -Wl,--gc-sections,-s -O3
	RCConfig		= -DNDEBUG
}

.MCFBuildVersion	= 0.4
.DefaultConfig		= Debug

.PreBuild {
	Command			= mkdir MCFLite >nul 2>nul	\n\
						for /f "eol=\;" %I in (libmcflite.lst) do	\n\
							(copy /y "%I" "MCFLite\\" || exit /b 1)
}
; $$		字符 $。
; $%		输出文件，不带引号的绝对路径。
; $@		带引号的输出文件路径，等价于 "$%"。
; $<		所有输入文件，带引号的绝对路径。
; $!		导出包含文件列表的输出文件，带引号的绝对路径。
; $(名称)	调用指定的宏。括号可以省略，在这种情况下名称为 $ 符号后最长的
;			完全由数字、字母和下划线组成的字符串。
.Precompilers {
;	Precompiled\\.h {
;		Suffix		=
;		Command		= $CC -x c-header $CompilerConfig $CFlags -o $@.gch $<	\n\
;						echo #warning Failed to load C precompiled header "$%.gch".	\n\
;						echo #include $< > $@
;		Invoked		= -fpch-deps -fpch-preprocess -include $@
;	}
	MCFBuild\\.hpp {
		Suffix		=
		Command		= $CXX -x c++-header $CompilerConfig $CXXFlags -o $@.gch $<	\n\
						echo #warning Failed to load C++ precompiled header "$%.gch". > $@	\n\
						echo #include $< >> $@
		Invoked		= -fpch-deps -fpch-preprocess -include $@
	}
}
.Compilers {
	.*\\.c {
		Suffix		= .o
		Command		= $CC -x c -c $CompilerConfig $CFlags -o $@ $< -MMD -MF $!
	}
	.*\\.cpp {
		Suffix		= .o
		Command		= $CXX -x c++ -c $CompilerConfig $CXXFlags -o $@ $< -MMD -MF $!
		PCHInvoked	= MCFBuild.hpp
	}
	.*\\.rc {
		Suffix		= .o
		Command		= $WINDRES -O coff -o $@ -i $<
	}
}
.Linkers {
	Partial			= ld -r -o $@ $<
	Command			= $CXX $LinkerConfig $LinkerFlags -o MCFBuild.exe $<
}
.PostBuild {
	Command			= echo meow!!
}
