; 定义一些变量。
CPPFlags	= -Wall -Wextra -pedantic -Wsign-conversion -Wsuggest-attribute=noreturn -Wundef -pipe	\
				-mfpmath=both -march=nocona -masm=intel -isystem  ../../
CFlags		= -std=c11
CXXFlags	= -std=c++14 -Wzero-as-null-pointer-constant -Wnoexcept
LDFlags		= -Wall -Wextra -static -nostdlib -Wl,-e__MCF_ExeStartup,--disable-runtime-pseudo-reloc,--disable-auto-import	\
				-Wl,--wrap=atexit,--wrap=malloc,--wrap=realloc,--wrap=calloc,--wrap=free,--wrap=__cxa_throw
Libs		= -lmcflite -lstdc++ -lmingwex -lmingw32 -lgcc -lgcc_eh -lmcflite -lmsvcrt -luser32 -lkernel32

.Config {
	; 定义配置包。这些配置可以于命令行中选择。如果命令行中没有指定配置包，则使用第一个。
	Debug {
		CPPFlags	= $CPPFlags -O0 -g -fno-builtin -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC
		LDFlags		= $LDFlags -O0 -g
	}
	Release {
		CPPFlags	= $CPPFlags -O3 -ffunction-sections -fdata-sections -DNDEBUG
		LDFlags		= $LDFlags -O3 -Wl,--gc-sections,-s
	}
}

; $.src	= 输入目录路径
; $.dst	= 输出目录路径

.PreBuild {
	; 在构建之前执行这些命令。命令是按顺序执行的，名字不重要。

	; 0 = command
	; 1 = another command
}
.PostBuild {
	; 在构建之后执行这些命令。命令是按顺序执行的，名字不重要。
}

.Precompiler {
	; $.out	= 输出目标文件绝对路径
	; $.dep	= 输出依赖文件绝对路径

	; 名称为输出文件的相对路径，值为命令行。
	pch_cxx.hpp	= cmd /c echo #error Error loading precompiled header file. > $.out	&& \
					gcc -x c++-header $CPPFlags $CXXFlags -o $.out.gch $.src/Precompiled.hpp -MMD $.dep
}
.Compiler {
	; $.in	= 输入源文件绝对路径
	; $.out	= 输出目标文件绝对路径
	; $.dep	= 输出依赖文件绝对路径

	; 指定额外的参与编译的文件。
	.Extra	= ../../MCFCRT/stdc/stdlib/atexit.c
	.Extra	= ../../MCFCRT/stdc/stdlib/malloc.c
	.Extra	= ../../MCFCRT/stdc/stdlib/realloc.c
	.Extra	= ../../MCFCRT/stdc/stdlib/calloc.c
	.Extra	= ../../MCFCRT/stdc/stdlib/free.c
	.Extra	= ../../MCFCRT/ext/wcscpyout.c
	.Extra	= ../../MCFCRT/env/argv.c
	.Extra	= ../../MCFCRT/env/bail.c
	.Extra	= ../../MCFCRT/env/dlmalloc.c
	.Extra	= ../../MCFCRT/env/module.c
	.Extra	= ../../MCFCRT/env/last_error.c
	.Extra	= ../../MCFCRT/env/fenv.c
	.Extra	= ../../MCFCRT/env/mingw_hacks.c
	.Extra	= ../../MCFCRT/env/avl_tree.c
	.Extra	= ../../MCFCRT/env/thread.c
	.Extra	= ../../MCFCRT/env/heap.c
	.Extra	= ../../MCFCRT/env/heap_dbg.c
	.Extra	= ../../MCFCRT/env/cxa_throw.cpp
	.Extra	= ../../MCFCRT/exe/exe_startup.c
	.Extra	= ../../MCF/Core/Argv.cpp
	.Extra	= ../../MCF/Core/Exception.cpp
	.Extra	= ../../MCF/Core/StringObserver.cpp
	.Extra	= ../../MCF/Core/String.cpp
	.Extra	= ../../MCF/Core/File.cpp
	.Extra	= ../../MCF/Core/Utf8TextFile.cpp
	.Extra	= ../../MCF/Core/System.cpp
	.Extra	= ../../MCF/Core/Time.cpp
	.Extra	= ../../MCF/Core/StreamBuffer.cpp
	.Extra	= ../../MCF/Thread/_UniqueWin32Handle.cpp
	.Extra	= ../../MCF/Thread/Thread.cpp
	.Extra	= ../../MCF/Thread/Mutex.cpp
	.Extra	= ../../MCF/Thread/Semaphore.cpp
	.Extra	= ../../MCF/Languages/MNotation.cpp
	.Extra	= ../../MCF/Hash/Sha256.cpp

	; 名称为过滤规则（注意匹配的是全路径）。如果名称以斜杠开头并结束，则将其中的内容视为正则表达式。
	; 匹配的顺序就是这里的定义顺序，从第一个查找到最后一个。
	; 如果发现匹配，则使用该行定义的命令行；如果任何一个命令行都不匹配，则该源文件被忽略。
	*.h			= gcc -x c-header $CPPFlags $CFlags -include $.out/pch_cxx.hpp -fpch-deps -o $.out $.in -MMD $.dep
	*.hpp		= gcc -x c++-header $CPPFlags $CXXFlags -include $.out/pch_cxx.hpp -fpch-deps -o $.out $.in -MMD $.dep
	; /regexp/	= command
}
.Linker {
	; $.in	= 所有输入目标文件路径
	; $.out	= 输出最终文件路径

	; 指定额外的参与链接的文件。
	; .Extra	=
	; 当命令行过长时用于合并目标文件。
	.Partial	= ld -o $.out -r $.in

	; 名称为输出文件的相对路径，值为命令行。
	MCFBuild.exe	= gcc $LDFlags -o $.out $.in $Libs
	; another.dll	= other command
}
